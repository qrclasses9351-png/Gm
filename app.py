import os
import logging
import re
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from downloader import DownloadManager

# Bot configuration
BOT_TOKEN = os.environ.get('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramDownloaderBot:
    def __init__(self):
        self.download_manager = DownloadManager()
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Send welcome message when command /start is issued."""
        user = update.effective_user
        welcome_text = f"""
‡§®‡§Æ‡§∏‡•ç‡§§‡•á {user.first_name}! üôè

‡§Æ‡•à‡§Ç ‡§è‡§ï ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§°‡§∞ ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Ç ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•ã PDF ‡§î‡§∞ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§´‡§æ‡§á‡§≤‡•á‡§Ç ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§

üìÅ **‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ:**
1. ‡§Æ‡•Å‡§ù‡•á ‡§ï‡•ã‡§à ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§´‡§æ‡§á‡§≤ ‡§≠‡•á‡§ú‡•á‡§Ç ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§≤‡§ø‡§Ç‡§ï‡•ç‡§∏ ‡§π‡•ã‡§Ç
2. ‡§Ø‡§æ ‡§∏‡•Ä‡§ß‡•á PDF/‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú‡•á‡§Ç

üîß **‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏:**
/start - ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
/download - ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
/status - ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç

‡§¨‡§∏ ‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§™‡§®‡•Ä ‡§´‡§æ‡§á‡§≤ ‡§≠‡•á‡§ú‡•á‡§Ç ‡§î‡§∞ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ! üòä
        """
        await update.message.reply_text(welcome_text)

    async def handle_text_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text files containing download links."""
        try:
            file = await update.message.document.get_file()
            file_path = f"temp_{update.message.document.file_name}"
            
            await file.download_to_drive(file_path)
            
            # Read the file content
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Parse links
            links = self.extract_links(content)
            
            if not links:
                await update.message.reply_text("‚ùå ‡§á‡§∏ ‡§´‡§æ‡§á‡§≤ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§µ‡•à‡§ß ‡§≤‡§ø‡§Ç‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
                os.remove(file_path)
                return
            
            await update.message.reply_text(f"‚úÖ {len(links)} ‡§≤‡§ø‡§Ç‡§ï ‡§Æ‡§ø‡§≤‡•á! ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç...")
            
            # Start download process
            await self.start_download(update, context, links)
            
            # Clean up
            os.remove(file_path)
            
        except Exception as e:
            logger.error(f"Error handling text file: {e}")
            await update.message.reply_text("‚ùå ‡§´‡§æ‡§á‡§≤ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§")

    async def handle_direct_links(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle direct links sent as text."""
        text = update.message.text
        links = self.extract_links(text)
        
        if not links:
            await update.message.reply_text("‚ùå ‡§ï‡•ã‡§à ‡§µ‡•à‡§ß ‡§≤‡§ø‡§Ç‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
            return
        
        await update.message.reply_text(f"‚úÖ {len(links)} ‡§≤‡§ø‡§Ç‡§ï ‡§Æ‡§ø‡§≤‡•á! ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç...")
        await self.start_download(update, context, links)

    def extract_links(self, text):
        """Extract PDF and video links from text."""
        # Pattern for both PDF and video links
        pattern = r'https?://[^\s<>"]+?\.(pdf|PDF|mp4|MP4|mp3|MP3|mov|MOV|avi|AVI)'
        links = re.findall(pattern, text)
        
        # Also get all URLs and filter
        url_pattern = r'https?://[^\s<>"]+'
        all_urls = re.findall(url_pattern, text)
        
        valid_urls = []
        for url in all_urls:
            if any(ext in url.lower() for ext in ['.pdf', '.mp4', '.mp3', '.mov', '.avi']):
                valid_urls.append(url)
            elif 'utkarshapp.com' in url or 'cloudfront.net' in url:
                valid_urls.append(url)
        
        return list(set(valid_urls))  # Remove duplicates

    async def start_download(self, update: Update, context: ContextTypes.DEFAULT_TYPE, links):
        """Start the download process."""
        chat_id = update.effective_chat.id
        
        try:
            # Create download directory
            download_dir = f"downloads_{chat_id}"
            os.makedirs(download_dir, exist_ok=True)
            
            # Start download
            total_files = len(links)
            downloaded_files = []
            
            for i, link in enumerate(links, 1):
                try:
                    await update.message.reply_text(f"üì• ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à ({i}/{total_files}):\n{link}")
                    
                    filename = await self.download_manager.download_file(link, download_dir)
                    
                    if filename:
                        downloaded_files.append(filename)
                        await update.message.reply_text(f"‚úÖ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•Å‡§Ü: {filename}")
                    else:
                        await update.message.reply_text(f"‚ùå ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§µ‡§ø‡§´‡§≤: {link}")
                        
                except Exception as e:
                    logger.error(f"Error downloading {link}: {e}")
                    await update.message.reply_text(f"‚ùå ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {link}")
            
            # Send completion message
            if downloaded_files:
                await update.message.reply_text(
                    f"üéâ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü!\n"
                    f"‚úÖ ‡§∏‡§´‡§≤: {len(downloaded_files)}/{total_files} ‡§´‡§æ‡§á‡§≤‡•á‡§Ç\n"
                    f"üìÅ ‡§≤‡•ã‡§ï‡•á‡§∂‡§®: {download_dir}"
                )
            else:
                await update.message.reply_text("‚ùå ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§´‡§æ‡§á‡§≤ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡•Ä‡•§")
                
        except Exception as e:
            logger.error(f"Download process error: {e}")
            await update.message.reply_text("‚ùå ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§")

    async def download_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /download command."""
        await update.message.reply_text(
            "üìÅ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§è‡§ï ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§´‡§æ‡§á‡§≤ ‡§≠‡•á‡§ú‡•á‡§Ç ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§≤‡§ø‡§Ç‡§ï‡•ç‡§∏ ‡§π‡•ã‡§Ç, "
            "‡§Ø‡§æ ‡§∏‡•Ä‡§ß‡•á ‡§≤‡§ø‡§Ç‡§ï‡•ç‡§∏ ‡§ï‡•ã ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§™‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§"
        )

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /status command."""
        await update.message.reply_text("ü§ñ ‡§¨‡•â‡§ü ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à ‡§î‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à!")

def main():
    """Start the bot."""
    # Create bot instance
    bot = TelegramDownloaderBot()
    
    # Create application
    application = Application.builder().token(BOT_TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("download", bot.download_command))
    application.add_handler(CommandHandler("status", bot.status_command))
    application.add_handler(MessageHandler(filters.Document.TEXT, bot.handle_text_file))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_direct_links))

    # Start the Bot
    port = int(os.environ.get('PORT', 8443))
    webhook_url = os.environ.get('WEBHOOK_URL', '')
    
    if webhook_url:
        # Production (with webhook)
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=BOT_TOKEN,
            webhook_url=f"{webhook_url}/{BOT_TOKEN}"
        )
    else:
        # Development (polling)
        application.run_polling()

if __name__ == '__main__':
    main()
